name: VM Publish Production and Docker Hub 

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Create .env file
        run: echo "${{ secrets.ENV_FILE }}" > .env    

      - name: Install dependencies
        run: npm ci

      - name: Remove .env file
        run: rm .env
  
  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Create .env file
        run: echo "${{ secrets.HUB_ENV_FILE }}" > .env    
      
      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      #- name: Start server with node_env=test
      #  run: npm run start NODE_ENV=test

      #- name: Run API tests
      #  run: npm run test:api

      #- name: Clone frontend repository
      #  run: git clone

      #- name: Start frontend server
      #  run: npm run dev

      #- name: Run E2E tests
      #  run: npm run test:e2e

      - name: Remove .env file
        run: rm .env
        
  deploy-to-vm:
    needs: 
      - build
      - test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Create .env file
      run: echo "${{ secrets.ENV_FILE }}" > .env

    - name: Create gmail_credentials.json file
      run: echo '${{ secrets.GMAIL_CREDENTIALS }}' > gmail_credentials.json

    - name: Create gmail_token.json file
      run: echo '${{ secrets.GMAIL_TOKEN }}' > gmail_token.json

    - name: SSH and Remove old files
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          rm -rf ${{ secrets.SERVER_LOCATION }}/github/workspace
    
    - name: SCP files to server
      uses: appleboy/scp-action@v0.1.7
      with:
        host: "${{ secrets.SERVER_HOST }}"
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        source: "${{ github.workspace }}"
        target: "${{ secrets.SERVER_LOCATION }}"
    
    - name: SSH and Docker build
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          cd ${{ secrets.SERVER_LOCATION }}/github/workspace
          docker build -t ${{ secrets.IMAGE_NAME }}:${{ secrets.IMAGE_TAG }} .
          docker-compose -f compose-local-image.yml down
          docker-compose -f compose-local-image.yml up -d
          docker image prune -f
    
    - name: Remove .env file
      run: rm .env
    
    - name: Remove gmail_credentials.json file
      run: rm gmail_credentials.json

    - name: Remove gmail_token.json file
      run: rm gmail_token.json

  deploy-to-docker-hub:
    needs: 
      - build
      - test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create HUB .env file
        run: echo "${{ secrets.HUB_ENV_FILE }}" > .env

      - name: Create Empty gmail_credentials.json file
        run: echo "{}" > gmail_credentials.json

      - name: Create Empty gmail_token.json file
        run: echo "{}" > gmail_token.json

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and tag Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/chat-app-backend:latest .
          docker tag ${{ secrets.DOCKER_USERNAME }}/chat-app-backend:latest ${{ secrets.DOCKER_USERNAME }}/chat-app-backend:${{ github.sha }}

      - name: Push image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/chat-app-backend:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/chat-app-backend:${{ github.sha }}
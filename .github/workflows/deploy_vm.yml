name: VM Publish Production and Docker Hub 

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Create .env file
        run: echo "${{ secrets.ENV_FILE }}" > .env    

      - name: Install dependencies
        run: npm ci

      - name: Remove .env file
        run: rm .env
  
  vitest:
    needs: build
    runs-on: ubuntu-latest
    env:
      MYSQL_USER: root
      MYSQL_ROOT_PASSWORD: password
      MYSQL_HOST: 127.0.0.1
      MONGO_HOST: 127.0.0.1 
      NEO4J_HOST: 127.0.0.1
    services:
      mysql:
        image: mysql:8.0.39
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: chat
      #mongo:
      #  image: mongo:4.4.9
      #  ports:
      #    - 27017:27017
      neo4j:
        image: neo4j:5.24.2
        ports:
          - 7687:7687
          - 7474:7474
        env:
          NEO4J_AUTH: neo4j/password

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18

      # https://engineering.synatic.com/a-simple-way-to-run-a-mongodb-replica-set-in-github-actions
      - name: Start mongo
        id: start-mongo
        run: docker run --rm -d -p 27017:27017 --name mongo  mongo:4.4.9 --replSet test --bind_ip_all
      - name: Initialize MongoDB Replica Set
        run: |
          sleep 5 # Give mongo a chance to start up
          docker run --rm mongo:6.0 mongosh --host 172.17.0.1 --eval 'rs.initiate({_id: "test", members: [{_id: 0, host: "172.17.0.1:27017"}]})'

      - name: Create .env file
        run: echo "${{ secrets.TEST_ENV_FILE }}" > .env   

      - name: Install mongosh
        run: |
          wget -qO - https://www.mongodb.org/static/pgp/server-6.0.asc | sudo apt-key add -
          echo "deb [ arch=amd64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/6.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-6.0.list
          sudo apt-get update
          sudo apt-get install -y mongodb-mongosh

      - name: Install dependencies
        run: npm ci
        
      - name: Wait for dbs and overwite data
        run: |
          sh ./wait_for_dbs.sh --db-overwrite

      - name: Run tests
        run: npm test  

  postman-and-e2e-test:
    needs: build
    runs-on: ubuntu-latest
    env:
      MYSQL_USER: root
      MYSQL_ROOT_PASSWORD: password
      MYSQL_HOST: 127.0.0.1
      MONGO_HOST: 127.0.0.1 
      NEO4J_HOST: 127.0.0.1
    services:
      mysql:
        image: mysql:8.0.39
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: chat
      neo4j:
        image: neo4j:5.24.2
        ports:
          - 7687:7687
          - 7474:7474
        env:
          NEO4J_AUTH: neo4j/password

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18

      # https://engineering.synatic.com/a-simple-way-to-run-a-mongodb-replica-set-in-github-actions
      - name: Start mongo
        id: start-mongo
        run: docker run --rm -d -p 27017:27017 --name mongo  mongo:4.4.9 --replSet test --bind_ip_all
      - name: Initialize MongoDB Replica Set
        run: |
          sleep 5 # Give mongo a chance to start up
          docker run --rm mongo:6.0 mongosh --host 172.17.0.1 --eval 'rs.initiate({_id: "test", members: [{_id: 0, host: "172.17.0.1:27017"}]})'

      - name: Create .env file
        run: echo "${{ secrets.TEST_ENV_FILE }}" > .env   

      - name: Install mongosh
        run: |
          wget -qO - https://www.mongodb.org/static/pgp/server-6.0.asc | sudo apt-key add -
          echo "deb [ arch=amd64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/6.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-6.0.list
          sudo apt-get update
          sudo apt-get install -y mongodb-mongosh

      - name: Install dependencies
        run: npm ci
        
      - name: Wait for dbs and overwite data
        run: |
          sh ./wait_for_dbs.sh --db-overwrite

      - name: Start the server in the background
        run: |
          sh ./start.sh &
          SERVER_PID=$! # Capture the server's PID

      - name: Wait for the server to be ready
        run: |
          for i in {1..30}; do
            if curl -s http://localhost:3000 > /dev/null; then
              echo "Server is ready!"
              exit 0
            fi
            echo "Waiting for server to be ready..."
            sleep 2
          done
          echo "Server did not become ready in time!"
          kill $SERVER_PID # If server is still not ready, kill it
          exit 1

      - name: Install Newman
        run: npm install -g newman

      - name: Run MySQL API tests using Postman
        run: newman run ./test/api_test/Chat\ API\ Test.postman_collection.json --environment ./test/api_test/Chat\ App\ Dev\ MySQL.postman_environment.json

      - name: Run MongoDB API tests using Postman
        run: newman run ./test/api_test/Chat\ API\ Test.postman_collection.json --environment ./test/api_test/Chat\ App\ Dev\ MongoDB.postman_environment.json

      - name: Run Neo4j API tests using Postman
        run: newman run ./test/api_test/Chat\ API\ Test.postman_collection.json --environment ./test/api_test/Chat\ App\ Dev\ Neo4j.postman_environment.json

      - name: Clone frontend repository
        run: git clone https://github.com/niiicolai/chat-app-react.git

      - name: Install frontend dependencies
        run: |
          cd chat-app-react
          npm ci

      - name: Add .env file to frontend
        run: |
          cd chat-app-react
          echo "${{ secrets.TEST_FRONTEND_ENV_FILE }}" > .env

      - name: Start frontend server in the background
        run: |
          cd chat-app-react
          npm run dev &

      - name: Wait for frontend server to be ready
        run: |
          for i in {1..30}; do
            if curl -s http://localhost:5173 > /dev/null; then
              echo "Frontend server is ready!"
              exit 0
            fi
            echo "Waiting for frontend server to be ready..."
            sleep 2
          done
          echo "Frontend server did not become ready in time!"
          exit 1

      - name: Run E2E tests
        run: |
          cd chat-app-react
          npx cypress run

      - name: Remove frontend repository
        run: rm -rf chat-app-react

      - name: Remove .env file
        run: rm .env
         
  deploy-to-vm:
    needs: 
      - build
      - vitest
      - postman-and-e2e-test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Create .env file
      run: echo "${{ secrets.ENV_FILE }}" > .env

    - name: Create gmail_credentials.json file
      run: echo '${{ secrets.GMAIL_CREDENTIALS }}' > gmail_credentials.json

    - name: Create gmail_token.json file
      run: echo '${{ secrets.GMAIL_TOKEN }}' > gmail_token.json

    - name: SSH and Remove old files
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          rm -rf ${{ secrets.SERVER_LOCATION }}/github/workspace
    
    - name: SCP files to server
      uses: appleboy/scp-action@v0.1.7
      with:
        host: "${{ secrets.SERVER_HOST }}"
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        source: "${{ github.workspace }}"
        target: "${{ secrets.SERVER_LOCATION }}"
    
    - name: SSH and Docker build
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          cd ${{ secrets.SERVER_LOCATION }}/github/workspace
          docker build -t ${{ secrets.IMAGE_NAME }}:${{ secrets.IMAGE_TAG }} .
          docker-compose -f compose-local-image.yml down
          docker-compose -f compose-local-image.yml up -d
          docker image prune -f
    
    - name: Remove .env file
      run: rm .env
    
    - name: Remove gmail_credentials.json file
      run: rm gmail_credentials.json

    - name: Remove gmail_token.json file
      run: rm gmail_token.json

  deploy-to-docker-hub:
    needs: 
      - build
      - vitest
      - postman-and-e2e-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create HUB .env file
        run: echo "${{ secrets.HUB_ENV_FILE }}" > .env

      - name: Create Empty gmail_credentials.json file
        run: echo "{}" > gmail_credentials.json

      - name: Create Empty gmail_token.json file
        run: echo "{}" > gmail_token.json

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and tag Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/chat-app-backend:latest .
          docker tag ${{ secrets.DOCKER_USERNAME }}/chat-app-backend:latest ${{ secrets.DOCKER_USERNAME }}/chat-app-backend:${{ github.sha }}

      - name: Push image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/chat-app-backend:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/chat-app-backend:${{ github.sha }}
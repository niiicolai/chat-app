{
	"info": {
		"_postman_id": "4637b1a1-3470-431d-b305-1fe15d5c7cd3",
		"name": "Chat API Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18056195"
	},
	"item": [
		{
			"name": "User",
			"item": [
				{
					"name": "Create 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response must return 400\", function() {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/user",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create 200",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const { v4: uuidV4 } = require('uuid');\r",
									"\r",
									"pm.request.headers.add({\r",
									"    key: \"Authorization\", \r",
									"    value: pm.environment.get(\"Authorization\") \r",
									"});\r",
									"\r",
									"pm.environment.set('UserCreateBody', JSON.stringify({\r",
									"    uuid: uuidV4(),\r",
									"    email: `test-${uuidV4()}@example.com`,\r",
									"    username: `test-${uuidV4()}`,\r",
									"    password: `test-${uuidV4()}`\r",
									"}))\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJSON = pm.response.json();\r",
									"\r",
									"pm.test(\"response should return token\", function () {\r",
									"    pm.response.to.have.jsonBody(\"token\");\r",
									"});\r",
									"\r",
									"pm.test(\"token should be a string\", function () {\r",
									"    pm.expect(pm.response.json().token).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"token should be a base64 string\", function () {\r",
									"    pm.expect(pm.response.json().token).to.match(/^[a-zA-Z0-9-_]+\\.[a-zA-Z0-9-_]+\\.[a-zA-Z0-9-_]+$/);\r",
									"});\r",
									"\r",
									"pm.test(\"reponse must be an object\", function () {\r",
									"    pm.expect(responseJSON).to.be.an('object');\r",
									"});\r",
									"\r",
									"[\r",
									"    \"user\",\r",
									"    \"token\",\r",
									"].forEach(expected => {\r",
									"    pm.test(`response must include ${expected} property`, function () {\r",
									"        pm.expect(responseJSON).to.have.property(expected);\r",
									"    });\r",
									"});\r",
									"\r",
									"[\r",
									"    { prop: \"user\", type: \"object\" },\r",
									"    { prop: \"token\", type: \"string\" },\r",
									"].forEach(expected => {\r",
									"    pm.test(`response property ${expected.prop} must be of type ${expected.type}`, function () {\r",
									"        pm.expect(responseJSON[expected.prop])\r",
									"            .to.be.a(expected.type);\r",
									"    });\r",
									"});\r",
									"\r",
									"[\r",
									"    \"uuid\",\r",
									"    \"username\",\r",
									"    \"email\",\r",
									"    \"created_at\",\r",
									"    \"updated_at\",\r",
									"].forEach(expected => {\r",
									"    pm.test(`response.user must include ${expected} property`, function () {\r",
									"        pm.expect(responseJSON.user).to.have.property(expected);\r",
									"    });\r",
									"});\r",
									"\r",
									"[\r",
									"    { prop: \"uuid\", type: \"string\" },\r",
									"    { prop: \"email\", type: \"string\" },\r",
									"    { prop: \"username\", type: \"string\" },\r",
									"    { prop: \"created_at\", type: \"string\" },\r",
									"    { prop: \"updated_at\", type: \"string\" },\r",
									"].forEach(expected => {\r",
									"    pm.test(`response.user's property ${expected.prop} must be of type ${expected.type}`, function () {\r",
									"        pm.expect(responseJSON.user[expected.prop])\r",
									"            .to.be.a(expected.type);\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"response should NOT return user password\", function () {\r",
									"    pm.response.to.not.have.jsonBody(\"user.password\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{UserCreateBody}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/user",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJSON = pm.response.json();\r",
									"\r",
									"pm.test(\"response should return token\", function () {\r",
									"    pm.response.to.have.jsonBody(\"token\");\r",
									"});\r",
									"\r",
									"pm.test(\"token should be a string\", function () {\r",
									"    pm.expect(pm.response.json().token).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"token should be a base64 string\", function () {\r",
									"    pm.expect(pm.response.json().token).to.match(/^[a-zA-Z0-9-_]+\\.[a-zA-Z0-9-_]+\\.[a-zA-Z0-9-_]+$/);\r",
									"});\r",
									"\r",
									"pm.test(\"reponse must be an object\", function () {\r",
									"    pm.expect(responseJSON).to.be.an('object');\r",
									"});\r",
									"\r",
									"[\r",
									"    \"user\",\r",
									"    \"token\",\r",
									"].forEach(expected => {\r",
									"    pm.test(`response must include ${expected} property`, function () {\r",
									"        pm.expect(responseJSON).to.have.property(expected);\r",
									"    });\r",
									"});\r",
									"\r",
									"[\r",
									"    { prop: \"user\", type: \"object\" },\r",
									"    { prop: \"token\", type: \"string\" },\r",
									"].forEach(expected => {\r",
									"    pm.test(`response property ${expected.prop} must be of type ${expected.type}`, function () {\r",
									"        pm.expect(responseJSON[expected.prop])\r",
									"            .to.be.a(expected.type);\r",
									"    });\r",
									"});\r",
									"\r",
									"[\r",
									"    \"uuid\",\r",
									"    \"username\",\r",
									"    \"email\",\r",
									"    \"created_at\",\r",
									"    \"updated_at\",\r",
									"].forEach(expected => {\r",
									"    pm.test(`response.user must include ${expected} property`, function () {\r",
									"        pm.expect(responseJSON.user).to.have.property(expected);\r",
									"    });\r",
									"});\r",
									"\r",
									"[\r",
									"    { prop: \"uuid\", type: \"string\" },\r",
									"    { prop: \"email\", type: \"string\" },\r",
									"    { prop: \"username\", type: \"string\" },\r",
									"    { prop: \"created_at\", type: \"string\" },\r",
									"    { prop: \"updated_at\", type: \"string\" },\r",
									"].forEach(expected => {\r",
									"    pm.test(`response.user's property ${expected.prop} must be of type ${expected.type}`, function () {\r",
									"        pm.expect(responseJSON.user[expected.prop])\r",
									"            .to.be.a(expected.type);\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"response should NOT return user password\", function () {\r",
									"    pm.response.to.not.have.jsonBody(\"user.password\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{TestUserEmail}}\",\r\n    \"password\": \"{{TestUserPassword}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/user/login",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Room",
			"item": [
				{
					"name": "Create 400",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({\r",
									"    key: \"Authorization\", \r",
									"    value: pm.environment.get(\"Authorization\") \r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response must return 400\", function() {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/room",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"room"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create 200",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const { v4: uuidV4 } = require('uuid');\r",
									"\r",
									"pm.request.headers.add({\r",
									"    key: \"Authorization\", \r",
									"    value: pm.environment.get(\"Authorization\") \r",
									"});\r",
									"\r",
									"pm.environment.set('RoomCreateBody', JSON.stringify({\r",
									"    uuid: uuidV4(),\r",
									"    name: `test-${uuidV4()}`,\r",
									"    description: `test-${uuidV4()}`,\r",
									"    room_category_name: `General`\r",
									"}))\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJSON = pm.response.json();\r",
									"const roomCreateBody = JSON.parse(\r",
									"    pm.environment.get('RoomCreateBody'));\r",
									"\r",
									"// Set room uuid for later use\r",
									"pm.environment.set(\"RoomUuid\", responseJSON.uuid);\r",
									"\r",
									"pm.test(\"The returned room should match the parameters in the body\", function() {\r",
									"    pm.expect(responseJSON.uuid).to.equal(roomCreateBody.uuid);\r",
									"    pm.expect(responseJSON.name).to.equal(roomCreateBody.name);\r",
									"    pm.expect(responseJSON.description).to.equal(roomCreateBody.description);\r",
									"    pm.expect(responseJSON.room_category_name).to.equal(roomCreateBody.room_category_name);\r",
									"});\r",
									"\r",
									"\r",
									"[\r",
									"    \"uuid\",\r",
									"    \"name\",\r",
									"    \"description\",\r",
									"    \"room_category_name\",\r",
									"    \"bytes_used\",\r",
									"    \"mb_used\",\r",
									"    \"created_at\",\r",
									"    \"updated_at\",\r",
									"    \"joinSettings\",\r",
									"    \"rulesSettings\",\r",
									"    \"userSettings\",\r",
									"    \"channelSettings\",\r",
									"    \"fileSettings\",\r",
									"    \"avatar\"\r",
									"].forEach(expected => {\r",
									"    pm.test(`response must include ${expected} property`, function () {\r",
									"        pm.expect(responseJSON).to.have.property(expected);\r",
									"    });\r",
									"});\r",
									"\r",
									"[\r",
									"    { prop: \"uuid\", type: \"string\" },\r",
									"    { prop: \"name\", type: \"string\" },\r",
									"    { prop: \"description\", type: \"string\" },\r",
									"    { prop: \"room_category_name\", type: \"string\" },\r",
									"    { prop: \"bytes_used\", type: \"number\" },\r",
									"    { prop: \"mb_used\", type: \"number\" },\r",
									"    { prop: \"created_at\", type: \"string\" },\r",
									"    { prop: \"updated_at\", type: \"string\" },\r",
									"    { prop: \"joinSettings\", type: \"object\" },\r",
									"    { prop: \"rulesSettings\", type: \"object\" },\r",
									"    { prop: \"userSettings\", type: \"object\" },\r",
									"    { prop: \"channelSettings\", type: \"object\" },\r",
									"    { prop: \"fileSettings\", type: \"object\" },\r",
									"    { prop: \"avatar\", type: \"object\" },\r",
									"].forEach(expected => {\r",
									"    pm.test(`response property ${expected.prop} must be of type ${expected.type}`, function () {\r",
									"        pm.expect(responseJSON[expected.prop])\r",
									"            .to.be.a(expected.type);\r",
									"    });\r",
									"});\r",
									"\r",
									"[\r",
									"    \"join_channel_uuid\",\r",
									"    \"join_message\",\r",
									"].forEach(expected => {\r",
									"    pm.test(`response joinSettings property must include ${expected} property`, function () {\r",
									"        pm.expect(responseJSON.joinSettings).to.have.property(expected);\r",
									"    });\r",
									"});\r",
									"\r",
									"[\r",
									"    \"rules_text\",\r",
									"].forEach(expected => {\r",
									"    pm.test(`response rulesSettings property must include ${expected} property`, function () {\r",
									"        pm.expect(responseJSON.rulesSettings).to.have.property(expected);\r",
									"    });\r",
									"});\r",
									"\r",
									"[\r",
									"    \"max_users\",\r",
									"].forEach(expected => {\r",
									"    pm.test(`response userSettings property must include ${expected} property`, function () {\r",
									"        pm.expect(responseJSON.userSettings).to.have.property(expected);\r",
									"    });\r",
									"});\r",
									"\r",
									"[\r",
									"    \"max_channels\",\r",
									"    \"message_days_to_live\",\r",
									"].forEach(expected => {\r",
									"    pm.test(`response channelSettings property must include ${expected} property`, function () {\r",
									"        pm.expect(responseJSON.channelSettings).to.have.property(expected);\r",
									"    });\r",
									"});\r",
									"\r",
									"[\r",
									"    \"total_files_bytes_allowed\",\r",
									"    \"single_file_bytes_allowed\",\r",
									"    \"file_days_to_live\",\r",
									"    \"total_files_mb\",\r",
									"    \"single_file_mb\",\r",
									"].forEach(expected => {\r",
									"    pm.test(`response fileSettings property must include ${expected} property`, function () {\r",
									"        pm.expect(responseJSON.fileSettings).to.have.property(expected);\r",
									"    });\r",
									"});\r",
									"\r",
									"[\r",
									"    \"uuid\",\r",
									"    \"room_uuid\",\r",
									"].forEach(expected => {\r",
									"    pm.test(`response avatar property must include ${expected} property`, function () {\r",
									"        pm.expect(responseJSON.avatar).to.have.property(expected);\r",
									"    });\r",
									"});\r",
									"\r",
									"[\r",
									"    \"uuid\",\r",
									"    \"src\",\r",
									"    \"size_mb\",\r",
									"    \"room_file_type_name\",\r",
									"    \"room_uuid\",\r",
									"].forEach(expected => {\r",
									"    pm.test(`response avatar property with a room file must contain ${expected} property`, function () {\r",
									"        if (responseJSON.avatar.room_file) {\r",
									"            pm.expect(responseJSON.avatar.room_file).to.have.property(expected);\r",
									"        }\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{RoomCreateBody}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/room",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"room"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Details 200",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const { v4: uuidV4 } = require('uuid');\r",
									"\r",
									"pm.request.headers.add({\r",
									"    key: \"Authorization\", \r",
									"    value: pm.environment.get(\"Authorization\") \r",
									"});\r",
									"\r",
									"pm.environment.set('RoomUpdateBody', JSON.stringify({\r",
									"    name: `test-${uuidV4()}`,\r",
									"    description: `test-${uuidV4()}`,\r",
									"    room_category_name: `Tech`\r",
									"}))\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJSON = pm.response.json();\r",
									"const roomUuid = pm.environment.get('RoomUuid');\r",
									"const roomUpdateBody = JSON.parse(pm.environment.get('RoomUpdateBody'));\r",
									"\r",
									"pm.test(\"The returned room should match the parameters in the body\", function() {\r",
									"    pm.expect(responseJSON.uuid).to.equal(roomUuid);\r",
									"    pm.expect(responseJSON.name).to.equal(roomUpdateBody.name);\r",
									"    pm.expect(responseJSON.description).to.equal(roomUpdateBody.description);\r",
									"    pm.expect(responseJSON.room_category_name).to.equal(roomUpdateBody.room_category_name);\r",
									"});\r",
									"\r",
									"[\r",
									"    \"uuid\",\r",
									"    \"name\",\r",
									"    \"description\",\r",
									"    \"room_category_name\",\r",
									"    \"bytes_used\",\r",
									"    \"mb_used\",\r",
									"    \"created_at\",\r",
									"    \"updated_at\",\r",
									"    \"joinSettings\",\r",
									"    \"rulesSettings\",\r",
									"    \"userSettings\",\r",
									"    \"channelSettings\",\r",
									"    \"fileSettings\",\r",
									"    \"avatar\"\r",
									"].forEach(expected => {\r",
									"    pm.test(`response must include ${expected} property`, function () {\r",
									"        pm.expect(responseJSON).to.have.property(expected);\r",
									"    });\r",
									"});\r",
									"\r",
									"[\r",
									"    { prop: \"uuid\", type: \"string\" },\r",
									"    { prop: \"name\", type: \"string\" },\r",
									"    { prop: \"description\", type: \"string\" },\r",
									"    { prop: \"room_category_name\", type: \"string\" },\r",
									"    { prop: \"bytes_used\", type: \"number\" },\r",
									"    { prop: \"mb_used\", type: \"number\" },\r",
									"    { prop: \"created_at\", type: \"string\" },\r",
									"    { prop: \"updated_at\", type: \"string\" },\r",
									"    { prop: \"joinSettings\", type: \"object\" },\r",
									"    { prop: \"rulesSettings\", type: \"object\" },\r",
									"    { prop: \"userSettings\", type: \"object\" },\r",
									"    { prop: \"channelSettings\", type: \"object\" },\r",
									"    { prop: \"fileSettings\", type: \"object\" },\r",
									"    { prop: \"avatar\", type: \"object\" },\r",
									"].forEach(expected => {\r",
									"    pm.test(`response property ${expected.prop} must be of type ${expected.type}`, function () {\r",
									"        pm.expect(responseJSON[expected.prop])\r",
									"            .to.be.a(expected.type);\r",
									"    });\r",
									"});\r",
									"\r",
									"[\r",
									"    \"join_channel_uuid\",\r",
									"    \"join_message\",\r",
									"].forEach(expected => {\r",
									"    pm.test(`response joinSettings property must include ${expected} property`, function () {\r",
									"        pm.expect(responseJSON.joinSettings).to.have.property(expected);\r",
									"    });\r",
									"});\r",
									"\r",
									"[\r",
									"    \"rules_text\",\r",
									"].forEach(expected => {\r",
									"    pm.test(`response rulesSettings property must include ${expected} property`, function () {\r",
									"        pm.expect(responseJSON.rulesSettings).to.have.property(expected);\r",
									"    });\r",
									"});\r",
									"\r",
									"[\r",
									"    \"max_users\",\r",
									"].forEach(expected => {\r",
									"    pm.test(`response userSettings property must include ${expected} property`, function () {\r",
									"        pm.expect(responseJSON.userSettings).to.have.property(expected);\r",
									"    });\r",
									"});\r",
									"\r",
									"[\r",
									"    \"max_channels\",\r",
									"    \"message_days_to_live\",\r",
									"].forEach(expected => {\r",
									"    pm.test(`response channelSettings property must include ${expected} property`, function () {\r",
									"        pm.expect(responseJSON.channelSettings).to.have.property(expected);\r",
									"    });\r",
									"});\r",
									"\r",
									"[\r",
									"    \"total_files_bytes_allowed\",\r",
									"    \"single_file_bytes_allowed\",\r",
									"    \"file_days_to_live\",\r",
									"    \"total_files_mb\",\r",
									"    \"single_file_mb\",\r",
									"].forEach(expected => {\r",
									"    pm.test(`response fileSettings property must include ${expected} property`, function () {\r",
									"        pm.expect(responseJSON.fileSettings).to.have.property(expected);\r",
									"    });\r",
									"});\r",
									"\r",
									"[\r",
									"    \"uuid\",\r",
									"    \"room_uuid\",\r",
									"].forEach(expected => {\r",
									"    pm.test(`response avatar property must include ${expected} property`, function () {\r",
									"        pm.expect(responseJSON.avatar).to.have.property(expected);\r",
									"    });\r",
									"});\r",
									"\r",
									"[\r",
									"    \"uuid\",\r",
									"    \"src\",\r",
									"    \"size_mb\",\r",
									"    \"room_file_type_name\",\r",
									"    \"room_uuid\",\r",
									"].forEach(expected => {\r",
									"    pm.test(`response avatar property with a room file must contain ${expected} property`, function () {\r",
									"        if (responseJSON.avatar.room_file) {\r",
									"            pm.expect(responseJSON.avatar.room_file).to.have.property(expected);\r",
									"        }\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{RoomUpdateBody}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/room/{{RoomUuid}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"room",
								"{{RoomUuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Settings 204",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const { v4: uuidV4 } = require('uuid');\r",
									"\r",
									"pm.request.headers.add({\r",
									"    key: \"Authorization\", \r",
									"    value: pm.environment.get(\"Authorization\") \r",
									"});\r",
									"\r",
									"pm.environment.set('RoomSettingsBody', JSON.stringify({\r",
									"    join_message: `{name} test-${uuidV4()}`,\r",
									"    rules_text: \"Rules\"\r",
									"}))\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response must return 204\", function() {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{RoomSettingsBody}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/room/{{RoomUuid}}/settings",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"room",
								"{{RoomUuid}}",
								"settings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find One 200",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({\r",
									"    key: \"Authorization\", \r",
									"    value: pm.environment.get(\"Authorization\") \r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJSON = pm.response.json();\r",
									"\r",
									"[\r",
									"    \"uuid\",\r",
									"    \"name\",\r",
									"    \"description\",\r",
									"    \"room_category_name\",\r",
									"    \"bytes_used\",\r",
									"    \"mb_used\",\r",
									"    \"created_at\",\r",
									"    \"updated_at\",\r",
									"    \"joinSettings\",\r",
									"    \"rulesSettings\",\r",
									"    \"userSettings\",\r",
									"    \"channelSettings\",\r",
									"    \"fileSettings\",\r",
									"    \"avatar\"\r",
									"].forEach(expected => {\r",
									"    pm.test(`response must include ${expected} property`, function () {\r",
									"        pm.expect(responseJSON).to.have.property(expected);\r",
									"    });\r",
									"});\r",
									"\r",
									"[\r",
									"    { prop: \"uuid\", type: \"string\" },\r",
									"    { prop: \"name\", type: \"string\" },\r",
									"    { prop: \"description\", type: \"string\" },\r",
									"    { prop: \"room_category_name\", type: \"string\" },\r",
									"    { prop: \"bytes_used\", type: \"number\" },\r",
									"    { prop: \"mb_used\", type: \"number\" },\r",
									"    { prop: \"created_at\", type: \"string\" },\r",
									"    { prop: \"updated_at\", type: \"string\" },\r",
									"    { prop: \"joinSettings\", type: \"object\" },\r",
									"    { prop: \"rulesSettings\", type: \"object\" },\r",
									"    { prop: \"userSettings\", type: \"object\" },\r",
									"    { prop: \"channelSettings\", type: \"object\" },\r",
									"    { prop: \"fileSettings\", type: \"object\" },\r",
									"    { prop: \"avatar\", type: \"object\" },\r",
									"].forEach(expected => {\r",
									"    pm.test(`response property ${expected.prop} must be of type ${expected.type}`, function () {\r",
									"        pm.expect(responseJSON[expected.prop])\r",
									"            .to.be.a(expected.type);\r",
									"    });\r",
									"});\r",
									"\r",
									"[\r",
									"    \"join_channel_uuid\",\r",
									"    \"join_message\",\r",
									"].forEach(expected => {\r",
									"    pm.test(`response joinSettings property must include ${expected} property`, function () {\r",
									"        pm.expect(responseJSON.joinSettings).to.have.property(expected);\r",
									"    });\r",
									"});\r",
									"\r",
									"[\r",
									"    \"rules_text\",\r",
									"].forEach(expected => {\r",
									"    pm.test(`response rulesSettings property must include ${expected} property`, function () {\r",
									"        pm.expect(responseJSON.rulesSettings).to.have.property(expected);\r",
									"    });\r",
									"});\r",
									"\r",
									"[\r",
									"    \"max_users\",\r",
									"].forEach(expected => {\r",
									"    pm.test(`response userSettings property must include ${expected} property`, function () {\r",
									"        pm.expect(responseJSON.userSettings).to.have.property(expected);\r",
									"    });\r",
									"});\r",
									"\r",
									"[\r",
									"    \"max_channels\",\r",
									"    \"message_days_to_live\",\r",
									"].forEach(expected => {\r",
									"    pm.test(`response channelSettings property must include ${expected} property`, function () {\r",
									"        pm.expect(responseJSON.channelSettings).to.have.property(expected);\r",
									"    });\r",
									"});\r",
									"\r",
									"[\r",
									"    \"total_files_bytes_allowed\",\r",
									"    \"single_file_bytes_allowed\",\r",
									"    \"file_days_to_live\",\r",
									"    \"total_files_mb\",\r",
									"    \"single_file_mb\",\r",
									"].forEach(expected => {\r",
									"    pm.test(`response fileSettings property must include ${expected} property`, function () {\r",
									"        pm.expect(responseJSON.fileSettings).to.have.property(expected);\r",
									"    });\r",
									"});\r",
									"\r",
									"[\r",
									"    \"uuid\",\r",
									"    \"room_uuid\",\r",
									"].forEach(expected => {\r",
									"    pm.test(`response avatar property must include ${expected} property`, function () {\r",
									"        pm.expect(responseJSON.avatar).to.have.property(expected);\r",
									"    });\r",
									"});\r",
									"\r",
									"[\r",
									"    \"uuid\",\r",
									"    \"src\",\r",
									"    \"size_mb\",\r",
									"    \"room_file_type_name\",\r",
									"    \"room_uuid\",\r",
									"].forEach(expected => {\r",
									"    pm.test(`response avatar property with a room file must contain ${expected} property`, function () {\r",
									"        if (responseJSON.avatar.room_file) {\r",
									"            pm.expect(responseJSON.avatar.room_file).to.have.property(expected);\r",
									"        }\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/room/{{RoomUuid}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"room",
								"{{RoomUuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find All 200",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({\r",
									"    key: \"Authorization\", \r",
									"    value: pm.environment.get(\"Authorization\") \r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const isRoomValid = (room) => {\r",
									"    [\r",
									"        \"uuid\",\r",
									"        \"name\",\r",
									"        \"description\",\r",
									"        \"room_category_name\",\r",
									"        \"bytes_used\",\r",
									"        \"mb_used\",\r",
									"        \"created_at\",\r",
									"        \"updated_at\",\r",
									"        \"joinSettings\",\r",
									"        \"rulesSettings\",\r",
									"        \"userSettings\",\r",
									"        \"channelSettings\",\r",
									"        \"fileSettings\",\r",
									"        \"avatar\"\r",
									"    ].forEach(expected => {\r",
									"        pm.test(`response must include ${expected} property`, function () {\r",
									"            pm.expect(room).to.have.property(expected);\r",
									"        });\r",
									"    });\r",
									"\r",
									"    [\r",
									"        { prop: \"uuid\", type: \"string\" },\r",
									"        { prop: \"name\", type: \"string\" },\r",
									"        { prop: \"description\", type: \"string\" },\r",
									"        { prop: \"room_category_name\", type: \"string\" },\r",
									"        { prop: \"bytes_used\", type: \"number\" },\r",
									"        { prop: \"mb_used\", type: \"number\" },\r",
									"        { prop: \"created_at\", type: \"string\" },\r",
									"        { prop: \"updated_at\", type: \"string\" },\r",
									"        { prop: \"joinSettings\", type: \"object\" },\r",
									"        { prop: \"rulesSettings\", type: \"object\" },\r",
									"        { prop: \"userSettings\", type: \"object\" },\r",
									"        { prop: \"channelSettings\", type: \"object\" },\r",
									"        { prop: \"fileSettings\", type: \"object\" },\r",
									"        { prop: \"avatar\", type: \"object\" },\r",
									"    ].forEach(expected => {\r",
									"        pm.test(`response property ${expected.prop} must be of type ${expected.type}`, function () {\r",
									"            pm.expect(room[expected.prop])\r",
									"                .to.be.a(expected.type);\r",
									"        });\r",
									"    });\r",
									"\r",
									"    [\r",
									"        \"join_channel_uuid\",\r",
									"        \"join_message\",\r",
									"    ].forEach(expected => {\r",
									"        pm.test(`response joinSettings property must include ${expected} property`, function () {\r",
									"            pm.expect(room.joinSettings).to.have.property(expected);\r",
									"        });\r",
									"    });\r",
									"\r",
									"    [\r",
									"        \"rules_text\",\r",
									"    ].forEach(expected => {\r",
									"        pm.test(`response rulesSettings property must include ${expected} property`, function () {\r",
									"            pm.expect(room.rulesSettings).to.have.property(expected);\r",
									"        });\r",
									"    });\r",
									"\r",
									"    [\r",
									"        \"max_users\",\r",
									"    ].forEach(expected => {\r",
									"        pm.test(`response userSettings property must include ${expected} property`, function () {\r",
									"            pm.expect(room.userSettings).to.have.property(expected);\r",
									"        });\r",
									"    });\r",
									"\r",
									"    [\r",
									"        \"max_channels\",\r",
									"        \"message_days_to_live\",\r",
									"    ].forEach(expected => {\r",
									"        pm.test(`response channelSettings property must include ${expected} property`, function () {\r",
									"            pm.expect(room.channelSettings).to.have.property(expected);\r",
									"        });\r",
									"    });\r",
									"\r",
									"    [\r",
									"        \"total_files_bytes_allowed\",\r",
									"        \"single_file_bytes_allowed\",\r",
									"        \"file_days_to_live\",\r",
									"        \"total_files_mb\",\r",
									"        \"single_file_mb\",\r",
									"    ].forEach(expected => {\r",
									"        pm.test(`response fileSettings property must include ${expected} property`, function () {\r",
									"            pm.expect(room.fileSettings).to.have.property(expected);\r",
									"        });\r",
									"    });\r",
									"\r",
									"    [\r",
									"        \"uuid\",\r",
									"        \"room_uuid\",\r",
									"    ].forEach(expected => {\r",
									"        pm.test(`response avatar property must include ${expected} property`, function () {\r",
									"            pm.expect(room.avatar).to.have.property(expected);\r",
									"        });\r",
									"    });\r",
									"\r",
									"    [\r",
									"        \"uuid\",\r",
									"        \"src\",\r",
									"        \"size_mb\",\r",
									"        \"room_file_type_name\",\r",
									"        \"room_uuid\",\r",
									"    ].forEach(expected => {\r",
									"        pm.test(`response avatar property with a room file must contain ${expected} property`, function () {\r",
									"            if (room.avatar.room_file) {\r",
									"                pm.expect(room.avatar.room_file).to.have.property(expected);\r",
									"            }\r",
									"        });\r",
									"    });\r",
									"};\r",
									"\r",
									"const responseJSON = pm.response.json();\r",
									"\r",
									"pm.test(\"reponse must be an object\", function () {\r",
									"    pm.expect(responseJSON).to.be.an('object');\r",
									"});\r",
									"\r",
									"[\r",
									"    \"total\",\r",
									"    \"pages\",\r",
									"    \"page\",\r",
									"    \"limit\",\r",
									"    \"data\"\r",
									"].forEach(expected => {\r",
									"    pm.test(`response must include ${expected} property`, function () {\r",
									"        pm.expect(responseJSON).to.have.property(expected);\r",
									"    });\r",
									"});\r",
									"\r",
									"[\r",
									"    { prop: \"total\", type: \"number\" },\r",
									"    { prop: \"pages\", type: \"number\" },\r",
									"    { prop: \"page\", type: \"number\" },\r",
									"    { prop: \"limit\", type: \"number\" },\r",
									"    { prop: \"data\", type: \"array\" }\r",
									"].forEach(expected => {\r",
									"    pm.test(`response property ${expected.prop} must be of type ${expected.type}`, function () {\r",
									"        pm.expect(responseJSON[expected.prop])\r",
									"            .to.be.a(expected.type);\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"response data items must be valid rooms\", function () {\r",
									"    responseJSON.data.forEach(room => isRoomValid(room));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/rooms?limit=2&page=1",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"rooms"
							],
							"query": [
								{
									"key": "limit",
									"value": "2"
								},
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete 204",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({\r",
									"    key: \"Authorization\", \r",
									"    value: pm.environment.get(\"Authorization\") \r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response must return 204\", function() {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/room/{{RoomUuid}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"room",
								"{{RoomUuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete 404",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({\r",
									"    key: \"Authorization\", \r",
									"    value: pm.environment.get(\"Authorization\") \r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response must return 404\", function() {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/room/{{RoomUuid}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"room",
								"{{RoomUuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find One 404",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({\r",
									"    key: \"Authorization\", \r",
									"    value: pm.environment.get(\"Authorization\") \r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response must return 404\", function() {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/room/{{RoomUuid}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"room",
								"{{RoomUuid}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"const email = pm.environment.get(\"TestUserEmail\");\r",
					"const password = pm.environment.get(\"TestUserPassword\");\r",
					"\r",
					"pm.sendRequest({\r",
					"    url: pm.environment.get(\"BaseUrl\") + \"/user/login\",\r",
					"    method: 'POST',\r",
					"    header: {\r",
					"        'Content-Type': 'application/json'\r",
					"    },\r",
					"    body: {\r",
					"        mode: 'raw',\r",
					"        raw: JSON.stringify({ \r",
					"            email, \r",
					"            password\r",
					"        })\r",
					"    }\r",
					"}, function (err, res) {\r",
					"    if (err) {\r",
					"        console.error(err);\r",
					"    } else {\r",
					"        const jsonData = res.json();\r",
					"        console.log(jsonData)\r",
					"        const token = jsonData.token;\r",
					"        pm.environment.set(\"Authorization\", \"Bearer \" + token);\r",
					"    }\r",
					"});\r",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}